{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"enabled\", \"onValueChange\", \"selectedValue\", \"itemStyle\", \"mode\", \"prompt\", \"dropdownIconColor\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport * as ReactNativeWeb from \"react-native-web/dist/index\";\nimport { forwardRef, useRef } from 'react';\nimport PickerItem from \"./PickerItem\";\nvar createElement = ReactNativeWeb.createElement || ReactNativeWeb.unstable_createElement;\nvar Select = forwardRef(function (props, forwardedRef) {\n  return createElement('select', props);\n});\nvar Picker = forwardRef(function (props, forwardedRef) {\n  var enabled = props.enabled,\n    onValueChange = props.onValueChange,\n    selectedValue = props.selectedValue,\n    itemStyle = props.itemStyle,\n    mode = props.mode,\n    prompt = props.prompt,\n    dropdownIconColor = props.dropdownIconColor,\n    other = _objectWithoutProperties(props, _excluded);\n  var hostRef = useRef(null);\n  var handleChange = React.useCallback(function (e) {\n    var _e$target = e.target,\n      selectedIndex = _e$target.selectedIndex,\n      value = _e$target.value;\n    if (onValueChange) {\n      onValueChange(value, selectedIndex);\n    }\n  }, [onValueChange]);\n  return (\n    React.createElement(Select, _extends({\n      disabled: enabled === false ? true : undefined,\n      onChange: handleChange,\n      ref: hostRef,\n      value: selectedValue\n    }, other))\n  );\n});\n\nPicker.Item = PickerItem;\nexport default Picker;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;AAOA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAAA,OACO,KAAKC,cAAZ;AACA,SAAQC,UAAR,EAAoBC,MAApB,QAAiC,OAAjC;AAIA,OAAOC,UAAP;AAmBA,IAAMC,aAAa,GACjBJ,cAAc,CAACI,aAAf,IAAgCJ,cAAc,CAACK,sBADjD;AAGA,IAAMC,MAAM,GAAGL,UAAU,CAAC,UAACM,KAAD,EAAaC,YAAb;EAAA,OACxBJ,aAAa,CAAC,QAAD,EAAWG,KAAX,CADU;AAAA,EAAzB;AAIA,IAAME,MAAmD,GAAGR,UAAU,CAGpE,UAACM,KAAD,EAAQC,YAAR,EAAyB;EACzB,IACEE,OADI,GASFH,KATJ,CACEG,OADI;IAEJC,aAFI,GASFJ,KATJ,CAEEI,aAFI;IAGJC,aAHI,GASFL,KATJ,CAGEK,aAHI;IAIJC,SAJI,GASFN,KATJ,CAIEM,SAJI;IAKJC,IALI,GASFP,KATJ,CAKEO,IALI;IAMJC,MANI,GASFR,KATJ,CAMEQ,MANI;IAOJC,iBAPI,GASFT,KATJ,CAOES,iBAPI;IAQDC,iCACDV,KATJ;EAWA,IAAMW,OAAO,GAAGhB,MAAM,CAAC,IAAD,CAAtB;EAEA,IAAMiB,YAAY,GAAGpB,KAAK,CAACqB,WAAN,CAClBC,WAAD,EAAe;IACb,gBAA+BA,CAAC,CAACC,MAAjC;MAAOC,aAAD,aAACA,aAAD;MAAgBC;IACtB,IAAIb,aAAJ,EAAmB;MACjBA,aAAa,CAACa,KAAD,EAAQD,aAAR,CAAb;IACD;EACF,CANkB,EAOnB,CAACZ,aAAD,CAPmB,CAArB;EAUA;IAEEZ,oBAACO,MAAD;MACEmB,QAAQ,EAAEf,OAAO,KAAK,KAAZ,GAAoB,IAApB,GAA2BgB,SADvC;MAEEC,QAAQ,EAAER,YAFZ;MAGES,GAAG,EAAEV,OAHP;MAIEM,KAAK,EAAEZ;IAJT,GAKMK,KALN;EAAA;AAQH,CArCqE,CAAtE;;AAwCAR,MAAM,CAACoB,IAAP,GAAc1B,UAAd;AAEA,eAAeM,MAAf","names":["React","ReactNativeWeb","forwardRef","useRef","PickerItem","createElement","unstable_createElement","Select","props","forwardedRef","Picker","enabled","onValueChange","selectedValue","itemStyle","mode","prompt","dropdownIconColor","other","hostRef","handleChange","useCallback","e","target","selectedIndex","value","disabled","undefined","onChange","ref","Item"],"sources":["Picker.web.js"],"sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * @flow\n *\n */\n\nimport * as React from 'react';\nimport * as ReactNativeWeb from 'react-native-web';\nimport {forwardRef, useRef} from 'react';\nimport type {ViewProps} from 'react-native-web/src/exports/View/types';\nimport type {GenericStyleProp} from 'react-native-web/src/types';\nimport type {TextStyle} from 'react-native-web/src/exports/Text/types';\nimport PickerItem from './PickerItem';\n\ntype PickerProps = {\n  ...ViewProps,\n  children?: typeof PickerItem | Array<typeof PickerItem>,\n  enabled?: boolean,\n  onValueChange?: (number | string, number) => void,\n  selectedValue?: number | string,\n  /**\n   * dropdownIconColor\n   * Not used for Web.\n   */\n  dropdownIconColor?: string,\n  /* compat */\n  itemStyle?: GenericStyleProp<TextStyle>,\n  mode?: string,\n  prompt?: string,\n};\n\nconst createElement =\n  ReactNativeWeb.createElement || ReactNativeWeb.unstable_createElement;\n\nconst Select = forwardRef((props: any, forwardedRef) =>\n  createElement('select', props),\n);\n\nconst Picker: React$AbstractComponent<PickerProps, empty> = forwardRef<\n  PickerProps,\n  *,\n>((props, forwardedRef) => {\n  const {\n    enabled,\n    onValueChange,\n    selectedValue,\n    itemStyle,\n    mode,\n    prompt,\n    dropdownIconColor,\n    ...other\n  } = props;\n\n  const hostRef = useRef(null);\n\n  const handleChange = React.useCallback<any>(\n    (e: Object) => {\n      const {selectedIndex, value} = e.target;\n      if (onValueChange) {\n        onValueChange(value, selectedIndex);\n      }\n    },\n    [onValueChange],\n  );\n\n  return (\n    // $FlowFixMe\n    <Select\n      disabled={enabled === false ? true : undefined}\n      onChange={handleChange}\n      ref={hostRef}\n      value={selectedValue}\n      {...other}\n    />\n  );\n});\n\n// $FlowFixMe\nPicker.Item = PickerItem;\n\nexport default Picker;\n"]},"metadata":{},"sourceType":"module"}