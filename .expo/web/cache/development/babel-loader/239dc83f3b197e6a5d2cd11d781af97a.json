{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _constants$platform;\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { CodedError, NativeModulesProxy } from 'expo-modules-core';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport { AppOwnership, ExecutionEnvironment, UserInterfaceIdiom } from \"./Constants.types\";\nimport ExponentConstants from \"./ExponentConstants\";\nexport { AppOwnership, ExecutionEnvironment, UserInterfaceIdiom };\nif (!ExponentConstants) {\n  console.warn(\"No native ExponentConstants module found, are you sure the expo-constants's module is linked properly?\");\n}\nvar rawManifest = null;\nif (NativeModulesProxy.ExpoUpdates) {\n  var updatesManifest;\n  if (NativeModulesProxy.ExpoUpdates.manifest) {\n    updatesManifest = NativeModulesProxy.ExpoUpdates.manifest;\n  } else if (NativeModulesProxy.ExpoUpdates.manifestString) {\n    updatesManifest = JSON.parse(NativeModulesProxy.ExpoUpdates.manifestString);\n  }\n  if (updatesManifest && Object.keys(updatesManifest).length > 0) {\n    rawManifest = updatesManifest;\n  }\n}\nif (NativeModules.EXDevLauncher) {\n  var devLauncherManifest;\n  if (NativeModules.EXDevLauncher.manifestString) {\n    devLauncherManifest = JSON.parse(NativeModules.EXDevLauncher.manifestString);\n  }\n  if (devLauncherManifest && Object.keys(devLauncherManifest).length > 0) {\n    rawManifest = devLauncherManifest;\n  }\n}\nif (!rawManifest && ExponentConstants && ExponentConstants.manifest) {\n  rawManifest = ExponentConstants.manifest;\n  if (typeof rawManifest === 'string') {\n    rawManifest = JSON.parse(rawManifest);\n  }\n}\nvar _ref = ExponentConstants || {},\n  name = _ref.name,\n  appOwnership = _ref.appOwnership,\n  nativeConstants = _objectWithoutProperties(_ref, [\"name\", \"appOwnership\"]);\nvar warnedAboutDeviceYearClass = false;\nvar warnedAboutIosModel = false;\nvar warnedAboutInstallationId = false;\nvar warnedAboutDeviceId = false;\nvar warnedAboutLinkingUrl = false;\nvar constants = _objectSpread(_objectSpread({}, nativeConstants), {}, {\n  appOwnership: appOwnership != null ? appOwnership : null\n});\nvar constantsPropertiesGetter = {\n  deviceYearClass: function deviceYearClass() {\n    if (!warnedAboutDeviceYearClass) {\n      console.warn(\"Constants.deviceYearClass has been deprecated in favor of expo-device's Device.deviceYearClass property. This API will be removed in SDK 45.\");\n      warnedAboutDeviceYearClass = true;\n    }\n    return nativeConstants.deviceYearClass;\n  },\n  installationId: function installationId() {\n    if (!warnedAboutInstallationId) {\n      console.warn(\"Constants.installationId has been deprecated in favor of generating and storing your own ID. Implement it using expo-application's androidId on Android and a storage API such as expo-secure-store on iOS and localStorage on the web. This API will be removed in SDK 44.\");\n      warnedAboutInstallationId = true;\n    }\n    return nativeConstants.installationId;\n  },\n  deviceId: function deviceId() {\n    if (!warnedAboutDeviceId) {\n      console.warn(\"Constants.deviceId has been deprecated in favor of generating and storing your own ID. This API will be removed in SDK 44.\");\n      warnedAboutDeviceId = true;\n    }\n    return nativeConstants.installationId;\n  },\n  linkingUrl: function linkingUrl() {\n    if (!warnedAboutLinkingUrl) {\n      console.warn(\"Constants.linkingUrl has been renamed to Constants.linkingUri. Consider using the Linking API directly. Constants.linkingUrl will be removed in SDK 44.\");\n      warnedAboutLinkingUrl = true;\n    }\n    return nativeConstants.linkingUri;\n  },\n  manifest: function manifest() {\n    var maybeManifest = getManifest();\n    if (!maybeManifest || !isAppManifest(maybeManifest)) {\n      return null;\n    }\n    return maybeManifest;\n  },\n  manifest2: function manifest2() {\n    var maybeManifest = getManifest();\n    if (!maybeManifest || !isManifest(maybeManifest)) {\n      return null;\n    }\n    return maybeManifest;\n  },\n  __unsafeNoWarnManifest: function __unsafeNoWarnManifest() {\n    var maybeManifest = getManifest(true);\n    if (!maybeManifest || !isAppManifest(maybeManifest)) {\n      return null;\n    }\n    return maybeManifest;\n  },\n  __unsafeNoWarnManifest2: function __unsafeNoWarnManifest2() {\n    var maybeManifest = getManifest(true);\n    if (!maybeManifest || !isManifest(maybeManifest)) {\n      return null;\n    }\n    return maybeManifest;\n  }\n};\ndefinePropertiesGetter(constants, constantsPropertiesGetter);\nObject.defineProperty(constants, '__rawManifest_TEST', {\n  get: function get() {\n    return rawManifest;\n  },\n  set: function set(value) {\n    rawManifest = value;\n  },\n  enumerable: false\n});\nif (constants != null && (_constants$platform = constants.platform) != null && _constants$platform.ios) {\n  var originalModel = nativeConstants.platform.ios.model;\n  definePropertiesGetter(constants.platform.ios, {\n    model: function model() {\n      if (!warnedAboutIosModel) {\n        console.warn(\"Constants.platform.ios.model has been deprecated in favor of expo-device's Device.modelName property. This API will be removed in SDK 45.\");\n        warnedAboutIosModel = true;\n      }\n      return originalModel;\n    }\n  });\n}\nfunction definePropertiesGetter(target, props) {\n  for (var _i = 0, _Object$entries = Object.entries(props); _i < _Object$entries.length; _i++) {\n    var _ref2 = _Object$entries[_i];\n    var _ref3 = _slicedToArray(_ref2, 2);\n    var _name = _ref3[0];\n    var func = _ref3[1];\n    Object.defineProperty(target, _name, {\n      get: func,\n      enumerable: false\n    });\n  }\n}\nfunction isAppManifest(manifest) {\n  return !isManifest(manifest);\n}\nfunction isManifest(manifest) {\n  return 'metadata' in manifest;\n}\nfunction getManifest() {\n  var suppressWarning = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  if (!rawManifest) {\n    var invalidManifestType = rawManifest === null ? 'null' : 'undefined';\n    if (nativeConstants.executionEnvironment === ExecutionEnvironment.Bare && Platform.OS !== 'web') {\n      if (!suppressWarning) {\n        console.warn(\"Constants.manifest is \" + invalidManifestType + \" because the embedded app.config could not be read. Ensure that you have installed the expo-constants build scripts if you need to read from Constants.manifest.\");\n      }\n    } else if (nativeConstants.executionEnvironment === ExecutionEnvironment.StoreClient || nativeConstants.executionEnvironment === ExecutionEnvironment.Standalone) {\n      throw new CodedError('ERR_CONSTANTS_MANIFEST_UNAVAILABLE', \"Constants.manifest is \" + invalidManifestType + \", must be an object.\");\n    }\n  }\n  return rawManifest;\n}\nexport default constants;","map":{"version":3,"mappings":"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","names":["CodedError","NativeModulesProxy","AppOwnership","ExecutionEnvironment","UserInterfaceIdiom","ExponentConstants","console","warn","rawManifest","ExpoUpdates","updatesManifest","manifest","manifestString","JSON","parse","Object","keys","length","NativeModules","EXDevLauncher","devLauncherManifest","name","appOwnership","nativeConstants","warnedAboutDeviceYearClass","warnedAboutIosModel","warnedAboutInstallationId","warnedAboutDeviceId","warnedAboutLinkingUrl","constants","constantsPropertiesGetter","deviceYearClass","installationId","deviceId","linkingUrl","linkingUri","maybeManifest","getManifest","isAppManifest","manifest2","isManifest","__unsafeNoWarnManifest","__unsafeNoWarnManifest2","definePropertiesGetter","defineProperty","get","set","value","enumerable","platform","ios","originalModel","model","target","props","entries","func","suppressWarning","invalidManifestType","executionEnvironment","Bare","Platform","OS","StoreClient","Standalone"],"sourceRoot":"","sources":["../src/Constants.ts"],"sourcesContent":["import { CodedError, NativeModulesProxy } from 'expo-modules-core';\nimport { Platform, NativeModules } from 'react-native';\n\nimport {\n  AndroidManifest,\n  AppManifest,\n  AppOwnership,\n  Constants,\n  ExecutionEnvironment,\n  IOSManifest,\n  Manifest,\n  NativeConstants,\n  PlatformManifest,\n  UserInterfaceIdiom,\n  WebManifest,\n} from './Constants.types';\nimport ExponentConstants from './ExponentConstants';\n\nexport {\n  AndroidManifest,\n  AppOwnership,\n  Constants,\n  ExecutionEnvironment,\n  IOSManifest,\n  NativeConstants,\n  PlatformManifest,\n  UserInterfaceIdiom,\n  WebManifest,\n};\n\nif (!ExponentConstants) {\n  console.warn(\n    \"No native ExponentConstants module found, are you sure the expo-constants's module is linked properly?\"\n  );\n}\n\nlet rawManifest: AppManifest | Manifest | null = null;\n// If expo-updates defines a non-empty manifest, prefer that one\nif (NativeModulesProxy.ExpoUpdates) {\n  let updatesManifest;\n  if (NativeModulesProxy.ExpoUpdates.manifest) {\n    updatesManifest = NativeModulesProxy.ExpoUpdates.manifest;\n  } else if (NativeModulesProxy.ExpoUpdates.manifestString) {\n    updatesManifest = JSON.parse(NativeModulesProxy.ExpoUpdates.manifestString);\n  }\n  if (updatesManifest && Object.keys(updatesManifest).length > 0) {\n    rawManifest = updatesManifest;\n  }\n}\n\n// If dev-launcher defines a non-empty manifest, prefer that one\nif (NativeModules.EXDevLauncher) {\n  let devLauncherManifest;\n  if (NativeModules.EXDevLauncher.manifestString) {\n    devLauncherManifest = JSON.parse(NativeModules.EXDevLauncher.manifestString);\n  }\n\n  if (devLauncherManifest && Object.keys(devLauncherManifest).length > 0) {\n    rawManifest = devLauncherManifest;\n  }\n}\n\n// Fall back to ExponentConstants.manifest if we don't have one from Updates\nif (!rawManifest && ExponentConstants && ExponentConstants.manifest) {\n  rawManifest = ExponentConstants.manifest;\n  // On Android we pass the manifest in JSON form so this step is necessary\n  if (typeof rawManifest === 'string') {\n    rawManifest = JSON.parse(rawManifest);\n  }\n}\n\nconst { name, appOwnership, ...nativeConstants } = (ExponentConstants || {}) as any;\n\nlet warnedAboutDeviceYearClass = false;\nlet warnedAboutIosModel = false;\nlet warnedAboutInstallationId = false;\nlet warnedAboutDeviceId = false;\nlet warnedAboutLinkingUrl = false;\n\nconst constants: Constants = {\n  ...nativeConstants,\n  // Ensure this is null in bare workflow\n  appOwnership: appOwnership ?? null,\n};\n\nconst constantsPropertiesGetter: AccessorProps = {\n  // Deprecated fields\n  deviceYearClass() {\n    if (!warnedAboutDeviceYearClass) {\n      console.warn(\n        `Constants.deviceYearClass has been deprecated in favor of expo-device's Device.deviceYearClass property. This API will be removed in SDK 45.`\n      );\n      warnedAboutDeviceYearClass = true;\n    }\n    return nativeConstants.deviceYearClass;\n  },\n  // Deprecated fields\n  installationId() {\n    if (!warnedAboutInstallationId) {\n      console.warn(\n        `Constants.installationId has been deprecated in favor of generating and storing your own ID. Implement it using expo-application's androidId on Android and a storage API such as expo-secure-store on iOS and localStorage on the web. This API will be removed in SDK 44.`\n      );\n      warnedAboutInstallationId = true;\n    }\n    return nativeConstants.installationId;\n  },\n  // Legacy aliases\n  deviceId() {\n    if (!warnedAboutDeviceId) {\n      console.warn(\n        `Constants.deviceId has been deprecated in favor of generating and storing your own ID. This API will be removed in SDK 44.`\n      );\n      warnedAboutDeviceId = true;\n    }\n    return nativeConstants.installationId;\n  },\n  linkingUrl() {\n    if (!warnedAboutLinkingUrl) {\n      console.warn(\n        `Constants.linkingUrl has been renamed to Constants.linkingUri. Consider using the Linking API directly. Constants.linkingUrl will be removed in SDK 44.`\n      );\n      warnedAboutLinkingUrl = true;\n    }\n    return nativeConstants.linkingUri;\n  },\n  manifest(): AppManifest | null {\n    const maybeManifest = getManifest();\n    if (!maybeManifest || !isAppManifest(maybeManifest)) {\n      return null;\n    }\n    return maybeManifest;\n  },\n  manifest2(): Manifest | null {\n    const maybeManifest = getManifest();\n    if (!maybeManifest || !isManifest(maybeManifest)) {\n      return null;\n    }\n    return maybeManifest;\n  },\n  /**\n   * Use `manifest` property by default.\n   * This property is only used for internal purposes.\n   * It behaves similarly to the original one, but suppresses warning upon no manifest available.\n   * `expo-asset` uses it to prevent users from seeing mentioned warning.\n   */\n  __unsafeNoWarnManifest(): AppManifest | Manifest | null {\n    const maybeManifest = getManifest(true);\n    if (!maybeManifest || !isAppManifest(maybeManifest)) {\n      return null;\n    }\n    return maybeManifest;\n  },\n  __unsafeNoWarnManifest2(): Manifest | Manifest | null {\n    const maybeManifest = getManifest(true);\n    if (!maybeManifest || !isManifest(maybeManifest)) {\n      return null;\n    }\n    return maybeManifest;\n  },\n};\ndefinePropertiesGetter(constants, constantsPropertiesGetter);\n\nObject.defineProperty(constants, '__rawManifest_TEST', {\n  get(): AppManifest | Manifest | null {\n    return rawManifest;\n  },\n  set(value: AppManifest | Manifest | null) {\n    rawManifest = value;\n  },\n  // Prevent the warning from being thrown, or the value from being used when the user interacts with the entire object.\n  enumerable: false,\n});\n\n// Add deprecation warning for `platform.ios.model`\nif (constants?.platform?.ios) {\n  const originalModel = nativeConstants.platform.ios.model;\n  definePropertiesGetter(constants.platform.ios, {\n    model() {\n      if (!warnedAboutIosModel) {\n        console.warn(\n          `Constants.platform.ios.model has been deprecated in favor of expo-device's Device.modelName property. This API will be removed in SDK 45.`\n        );\n        warnedAboutIosModel = true;\n      }\n      return originalModel;\n    },\n  });\n}\n\ntype AccessorProps = Record<string, () => any>;\nfunction definePropertiesGetter(target: object, props: AccessorProps) {\n  for (const [name, func] of Object.entries(props)) {\n    Object.defineProperty(target, name, {\n      get: func,\n      // Prevent the warning from being thrown, or the value from being used when the user interacts with the entire object.\n      enumerable: false,\n    });\n  }\n}\n\nfunction isAppManifest(manifest: AppManifest | Manifest): manifest is AppManifest {\n  return !isManifest(manifest);\n}\n\nfunction isManifest(manifest: AppManifest | Manifest): manifest is Manifest {\n  return 'metadata' in manifest;\n}\n\nfunction getManifest(suppressWarning = false): AppManifest | Manifest | null {\n  if (!rawManifest) {\n    const invalidManifestType = rawManifest === null ? 'null' : 'undefined';\n    if (\n      nativeConstants.executionEnvironment === ExecutionEnvironment.Bare &&\n      Platform.OS !== 'web'\n    ) {\n      if (!suppressWarning) {\n        console.warn(\n          `Constants.manifest is ${invalidManifestType} because the embedded app.config could not be read. Ensure that you have installed the expo-constants build scripts if you need to read from Constants.manifest.`\n        );\n      }\n    } else if (\n      nativeConstants.executionEnvironment === ExecutionEnvironment.StoreClient ||\n      nativeConstants.executionEnvironment === ExecutionEnvironment.Standalone\n    ) {\n      // If we somehow get here, this is a truly exceptional state to be in.\n      // Constants.manifest should *always* be defined in those contexts.\n      throw new CodedError(\n        'ERR_CONSTANTS_MANIFEST_UNAVAILABLE',\n        `Constants.manifest is ${invalidManifestType}, must be an object.`\n      );\n    }\n  }\n  return rawManifest;\n}\n\nexport default constants as Constants;\n"]},"metadata":{},"sourceType":"module"}